security:
    encoders:
        Akyos\CoreBundle\Entity\User:
            algorithm: native

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload account from session & other features (e.g. switch_user)
        core_user_provider:
            entity:
                class: Akyos\CoreBundle\Entity\User
                property: email

        file_manager_provider:
            chain:
                providers: [ core_user_provider ]

        users_in_memory: { memory: null }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        core:
            pattern: ^/(app|admin)
            context: shared
            provider: core_user_provider
            anonymous: lazy
            access_denied_url: '/app/login'
            guard:
                authenticators:
                    - Akyos\CoreBundle\Security\CoreBundleAuthenticator
            logout:
                path: app_logout
                target: 'home'
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /

        file_manager:
            pattern: ^/(file-manager)
            context: shared
            provider: file_manager_provider
            anonymous: lazy
            guard:
                authenticators:
                    - Akyos\FileManagerBundle\Security\FileManagerBundleAuthenticator
            logout:
                path: file_manager_logout
                target: 'home'
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /

        main:
            anonymous: lazy
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        #CMS
        ROLE_ADMIN: [ ROLE_USER, ROLE_FILE_MANAGER, ROLE_FILE_MANAGER_SELF ]
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_AKYOS: [ ROLE_SUPER_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #CMS
        - { path: ^/file-manager/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/file-manager, roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
